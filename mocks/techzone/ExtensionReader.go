// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	io "io"

	techzone "github.com/cloud-native-toolkit/itzcli/pkg/techzone"
	mock "github.com/stretchr/testify/mock"
)

// ExtensionReader is an autogenerated mock type for the ExtensionReader type
type ExtensionReader struct {
	mock.Mock
}

// Read provides a mock function with given fields: _a0
func (_m *ExtensionReader) Read(_a0 io.Reader) (techzone.Extension, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 techzone.Extension
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (techzone.Extension, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) techzone.Extension); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(techzone.Extension)
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExtensionReader creates a new instance of ExtensionReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtensionReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtensionReader {
	mock := &ExtensionReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
